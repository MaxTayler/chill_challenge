<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spawn_latch = 0;// latch for spawning gorund mechanic 
start_lock = 0; // 
pause_lock = 0; // 
refresh_count = 30;// used to refresh game after crash 

quit = 0;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (global.game_state)
{
    case 1: // start menu 
// Start Game  

 if keyboard_check_pressed(vk_enter)
    {
    
    global.game_state = 2;
    instance_create(global.X-72,global.Y+4,obj_pulse_p1);
    instance_create(global.X,global.Y,obj_counter_p1);
    instance_create(global.X -64,global.Y+36, obj_score_p1 );
    instance_create(global.X-86,global.Y-28,obj_breath_p1);
    instance_create(global.X,global.Y,obj_display_p1);// create display for p1

    
    instance_create(global.X+72,global.Y+4,obj_pulse_p2);
        instance_create(global.X,global.Y,obj_counter_p2);
    instance_create(global.X +64,global.Y+36, obj_score_p2 );
        instance_create(global.X-86,global.Y-28,obj_breath_p2);
    instance_create(global.X,global.Y,obj_display_p2);// create display for p1
    
    switch(global.play_mode)// checks and load game play mode 
    {
    case 2:
       instance_create(global.X,global.Y,obj_game_win_timed); 
    break; 
    case 3:
    instance_create(global.X,global.Y,obj_chill_pong_engine);
    break;
    default:
    instance_create(global.X,global.Y,obj_game_win);
    break;
    }
    
    // change backgrounds 
    background_visible[1] = false;

    background_visible[3] = true;
    
 
       
    }



// setup test range 
          if keyboard_check_pressed(ord ('G'))
            {
            if (global.test_range &gt;= 60) 
                {global.test_range = 60;}
            else 
                {global.test_range += 1;}
                
            } // increase test range  
    
                   
          if keyboard_check_pressed(ord ('H'))
            {
            if (global.test_range &lt;= 6) 
                {global.test_range = 6;}
            else 
                {global.test_range -= 1;}
                
            } // decrease test range  

                
 // player 1 handicap 
          if keyboard_check_pressed(ord ('A'))
            {
            if (global.p1_handicap &gt;= 10) 
                {global.P1_handicap = 10;}
            else 
                {global.p1_handicap += 1;}
                
            } // increase player 1 handicap 
    
                   
          if keyboard_check_pressed(ord ('S'))
            {
            if (global.p1_handicap &lt;= 0) 
                {global.p1_handicap = 0;}
            else 
                {global.p1_handicap -= 1;}
                
            } // decrease player 1 handicap  
    
      // player 2 handicap 
          if keyboard_check_pressed(ord ('K')) // increase player 2 handicap 
            {
            if (global.p2_handicap &gt;= 10) 
                {global.P2_handicap = 10;}
            else 
                {global.p2_handicap += 1;}
                
            } 
    
                   
          if keyboard_check_pressed(ord ('L')) // decrease player 2 handicap  
            {
            if (global.p2_handicap &lt;= 0) 
                {global.p2_handicap = 0;}
            else 
                {global.p2_handicap -= 1;}
                
            } 
    

                  // select play mode 
          if keyboard_check_pressed(ord ('B')) // Select play mode right
            {
            if (global.play_mode &gt;= 3) 
                {global.play_mode = 3;}
            else 
                {global.play_mode += 1;}
                
            } 
    
                   
          if keyboard_check_pressed(ord ('V')) // Select play mode left  
            {
            if (global.play_mode &lt;= 1) 
                {global.play_modee = 1;}
            else 
                {global.play_mode -= 1;}
                
            } 
    
 
               break;

        // game on 
    case 2:
    
 
           if keyboard_check_pressed(ord ('Q'))
        {
        if (quit == 1) {quit = 0 ;}
        else{quit = 1;}
        }
        
        if(quit == 1) 
        {
            background_visible[4] = true;
        
             if keyboard_check_pressed(ord ('Y')) // go to menu 
         {
         quit = 0 ;
         global.game_state = 4;
        }
        
        if keyboard_check_pressed(ord ('N')) // go back to game 
        {
        quit = 0 ;
        }
        
        }
    break;  
    
    case 3:
                         if keyboard_check_pressed(vk_enter) // go to menu 
         {
         quit = 0 ;
         global.game_state = 4;
        }

    break;  
 // refresh Game go to main menu
     case 4:
  // game elements   
  with  (obj_game_win){instance_destroy();}
  with  (obj_game_win_timed){instance_destroy();}
  with  (obj_chill_pong_engine){instance_destroy();}
  
  // destroy player one elements 
  with  (obj_score_p1){instance_destroy();}
  with  (obj_counter_p1){instance_destroy();}
  with  (obj_pulse_p1){instance_destroy();}
  with  (obj_display_p1){instance_destroy();}
  with  (obj_breath_p1){instance_destroy();}
    
    // destroy player two elements
   with  (obj_score_p2){instance_destroy();}
   with  (obj_counter_p2){instance_destroy();}
   with  (obj_pulse_p2){instance_destroy();}
   with  (obj_display_p2){instance_destroy();}
   with  (obj_breath_p2){instance_destroy();}
   
         background_visible[1] = true;
        background_visible[3] = false;
  
  //reset heart rate data table for player one 

    global.hr_set_p1 = 1; // set data point entery 
    global.hr_1_p1 = 10;
    global.hr_2_p1 = 20;
    global.hr_3_p1 = 30;
    global.hr_4_p1 = 40;

    global.pulse_check_p1 = 0;// switches on pulse rate check, data table , and refreshes counts 
    global.count_check_p1  = 0;// counts number of pulses for global.pulse_count 
    global.pulse_rate_p1  = 0; // used to calculate heart rate to set hr_x
    global.count_total_p1 = 0;// counts time it take for pulse_count to complete 
    global.pause_p1 = 0;
    
             global.hr_count_p1 = 1;
         global.avg_hr_p1 = 0;
         global.hr_new_p1 = 0;
         global.hr_old_p1 = 0;
         global.dif_new_p1 = 0;
         global.dif_hr_p1  = 0;  
      //reset heart rate data table for player TWO

    global.hr_set_p2 = 1; // set data point entery 
    global.hr_1_p2 = 10;
    global.hr_2_p2 = 20;
    global.hr_3_p2 = 30;
    global.hr_4_p2 = 40;

    global.pulse_check_p2 = 0;// switches on pulse rate check, data table , and refreshes counts 
    global.count_check_p2  = 0;// counts number of pulses for global.pulse_count 
    global.pulse_rate_p2 = 0; // used to calculate heart rate to set hr_x
    global.count_total_p2 = 0;// counts time it take for pulse_count to complete 
    global.pause_p2 = 0;
      
                 global.hr_count_p2 = 1;
         global.avg_hr_p2 = 0;
         global.hr_new_p2 = 0;
         global.hr_old_p2 = 0;
         global.dif_new_p2 = 0;
         global.dif_hr_p2  = 0;  
      //reset heart rate data table for
    global.win = 0;     
    
     global.game_state = 1;         
    quit = 0;
        break;  

    case 5:
    break;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
  // draw text from center
 draw_set_halign(fa_center);
 draw_set_valign(fa_center);
 
switch(global.game_state)
{
case 1:
    draw_set_font(fnt_crux_2);
    draw_text(global.X,global.Y+28,global.test_range);
    draw_text(global.X-68,global.Y+52,global.p1_handicap);
    draw_text(global.X+68,global.Y+52,global.p2_handicap);
    draw_set_font(fnt_crux_1);
    draw_text(global.X+108,global.Y-44,global.play_mode);
    
 
 
break;

// game is on 
case 2:

if (quit == 1)
    {
    draw_sprite(spr_menu_plate,0,global.X,global.Y)
    draw_text(global.X,global.Y,"TO QUIT#PRESS Y/N")
    } 
break;
 // player or players have won 
 case 3:
    switch (global.win)
    {
        case 1:
        draw_sprite(spr_win_p1,0,global.X,global.Y-16)
       
        break;
        
        case 2:
        draw_sprite(spr_win_p2,0,global.X,global.Y-16)
        
        break;
    
    } 
 break;


}

draw_text(global.X,global.Y-48,fps)

draw_text(global.X+68,global.Y-52,"PRESS Q FOR MENU")
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
