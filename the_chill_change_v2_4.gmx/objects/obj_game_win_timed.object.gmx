<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// setup game time 

global.game_time = global.set_time*60*fps;

sun_set = global.game_time/240;
sun_count = sun_set;

sun_x = global.X-120;
sun_y = global.Y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
// rename  and update varibles
h1_p1 = global.hr_1_p1; h2_p1 = global.hr_2_p1;h3_p1 = global.hr_3_p1;
h1_p2 = global.hr_1_p2; h2_p2 = global.hr_2_p2;h3_p2 = global.hr_3_p2;

// add check event (for both players )

if (global.game_time == 0) // when time runs out 
{
// end game and check ratings


// if game has end

//who has the most consta least diference
if (         global.dif_hr_p1 &gt; global.dif_hr_p2)
//lowest diffrents 
{


}
else 
{

if (sun_count == 0)
{
sun_x += 1;
sun_count  = sun_set;
}
else {sun_count -= 1;}

global.game_time -= 1;
}// 






/*
// game check for player 1 mode - player 1
if (global.p1_handicap = 0 ) // set game to harder mode 
{
// check if  three of player 1's heart rates are the same  
  if (h1_p1 == h2_p1 and h2_p1 == h3_p1)
 {
 obj_score_p1.image_index = 3;
 
 global.win = 1;
 global.game_state = 3;
 } 
 else
    {
    // check if  two of player 1's heart rates are the same 
    if (h1_p1 == h2_p1)  
    {
                        
    {obj_score_p1.image_index = 1;}
    }
    else  
        {
        
        obj_score_p1.image_index = 0;// light one ice cubes up 
        }
    }
}
else // set to easier mode using handicap
{   
    // check to see if two of player 1's heart rates are similar range 
  if ( (((h1_p1 - h2_p1) &gt; (-1*global.p1_handicap)) and ((h2_p1 - h3_p1) &lt; global.p1_handicap)) and (((h2_p1 - h3_p1) &gt; (-1*global.p1_handicap)) and ((h2_p1 - h3_p1) &lt; global.p1_handicap)) )
    {
    obj_score_p1.image_index = 2;
     global.win = 1;
 global.game_state = 3;
    }
  else
  {
           
       if ( (h1_p1 - h2_p1) &gt;= (-1* global.p1_handicap) and (h1_p1 - h2_p1) &lt;=  global.p1_handicap )  
       {   
          
                {  obj_score_p1.image_index = 1;}
             
       }
       else
       {
       // light one ice cubes up
            obj_score_p1.image_index = 0; 
        }

    } 
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(global.X,global.Y,global.game_time);
draw_sprite(spr_sun,0,sun_x,sun_y);



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
