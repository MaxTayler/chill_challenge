<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>score_p1 = 1;
score_p2 = 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// rename  and update varibles
h1_p1 = global.hr_1_p1; h2_p1 = global.hr_2_p1;h3_p1 = global.hr_3_p1;h4_p1 = global.hr_4_p1;
h1_p2 = global.hr_1_p2; h2_p2 = global.hr_2_p2;h3_p2 = global.hr_3_p2;h4_p2 = global.hr_4_p2;


switch(global.hr_set_p1)
{
case 1:
h1_check_p1 = h4_p1;
h2_check_p1 = h3_p1;
h3_check_p1 = h2_p1;
break;

case 2:
h1_check_p1 = h1_p1;
h2_check_p1 = h4_p1;
h3_check_p1 = h3_p1;
break;

case 3:
h1_check_p1 = h2_p1;
h2_check_p1 = h1_p1;
h3_check_p1 = h4_p1;
break;

case 4:
h1_check_p1 = h3_p1;
h2_check_p1 = h2_p1;
h3_check_p1 = h1_p1;
break;

}

// game check for player 1 mode - player 1
if (global.p1_handicap = 0 ) // set game to harder mode 
{
// check if  three of player 1's heart rates are the same  

  if (h1_check_p1 == h2_check_p1 and h2_check_p1 == h3_check_p1)
 {
 obj_score_p1.image_index = 3;
 
 global.win = 1;
 global.game_state = 3;
 } 
 else
    {
    // check if  two of player 1's heart rates are the same 
    if (h1_check_p1 == h2_check_p1 ) 
    {
                        
    {obj_score_p1.image_index = 1;}
    }
    else  
        {
        
        obj_score_p1.image_index = 0;// light one ice cubes up 
        }
    }
}
else // set to easier mode using handicap
{   
    // check to see if two of player 1's heart rates are similar range 
  if ( (((h1_check_p1 - h2_check_p1) &gt;= (-1*global.p1_handicap)) and ((h1_check_p1 - h2_check_p1) &lt;= global.p1_handicap)) and (((h2_check_p1 - h3_check_p1) &gt;= (-1*global.p1_handicap)) and ((h2_check_p1 - h3_check_p1) &lt;= global.p1_handicap)) )
    {
    obj_score_p1.image_index = 2;
     global.win = 1;
 global.game_state = 3;
    }
  else
  {
           
       if ( (h1_check_p1 - h2_check_p1) &gt;= (-1* global.p1_handicap) and (h1_check_p1 - h2_check_p1) &lt;=  global.p1_handicap )  
       {   
          
                {  obj_score_p1.image_index = 1;}
             
       }
       else
       {
       // light one ice cubes up
            obj_score_p1.image_index = 0; 
        }

    } 
}


switch(global.hr_set_p2)
{
case 1:
h1_check_p2 = h4_p2;
h2_check_p2 = h3_p2;
h3_check_p2 = h2_p2;
break;

case 2:
h1_check_p2 = h1_p2;
h2_check_p2 = h4_p2;
h3_check_p2 = h3_p2;
break;

case 3:
h1_check_p2 = h2_p2;
h2_check_p2 = h1_p2;
h3_check_p2 = h4_p2;
break;

case 4:
h1_check_p2 = h3_p2;
h2_check_p2 = h2_p2;
h3_check_p2 = h1_p2;
break;

}
         
//*fix 

// game check for player 1 mode - player 1
if (global.p2_handicap = 0 ) // set game to harder mode 
{
// check if  three of player 1's heart rates are the same  

  if (h1_check_p2 == h2_check_p2 and h2_check_p2 == h3_check_p2)
 {
 obj_score_p2.image_index = 3;
 
 global.win = 2;
 global.game_state = 3;
 } 
 else
    {
    // check if  two of player 2s heart rates are the same 
    if (h1_check_p2 == h2_check_p2 ) 
    {
                        
    {obj_score_p2.image_index = 1;}
    }
    else  
        {
        
        obj_score_p2.image_index = 0;// light one ice cubes up 
        }
    }
}
else // set to easier mode using handicap
{   
    // check to see if two of player 2's heart rates are similar range 
  if ( (((h1_check_p2 - h2_check_p2) &gt;= (-1*global.p2_handicap)) and ((h1_check_p2 - h2_check_p2) &lt;= global.p2_handicap)) and (((h2_check_p2 - h3_check_p2) &gt;= (-1*global.p2_handicap)) and ((h2_check_p2 - h3_check_p2) &lt;= global.p2_handicap)) )
    {
    obj_score_p2.image_index = 2;
     global.win = 2;
 global.game_state = 3;
    }
  else
  {
           
       if ( (h1_check_p2 - h2_check_p2) &gt;= (-1* global.p2_handicap) and (h1_check_p2 - h2_check_p2) &lt;=  global.p2_handicap )  
       {   
          
                {  obj_score_p2.image_index = 1;}
             
       }
       else
       {
       // light one ice cubes up
            obj_score_p2.image_index = 0; 
        }

    } 
}

// two player mode check 
/*
if h1_check_p1 = h1_check_p2 and h1_check_p1 = h1_check_p2 //or design it 
{//switch special two mode 


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(score_p1)
{
case 1:
// draw effects or high light

break;

case 2:
break;

case 3:
break;
}

draw_background(bg_sun,global.X-24,global.Y-52);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
