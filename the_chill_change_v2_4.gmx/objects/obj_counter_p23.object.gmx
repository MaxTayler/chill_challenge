<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>test_range_latch = 0;


// for drawing rolling hr 
hr_1_x_p2 = 0;
hr_2_x_p2 = 0;
hr_3_x_p2 = 0;
hr_4_x_p2 = 0;

start = 1;

restart_count = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    if (global.pulse_check_p2 = 1  ) // turn pulse check
    {
   
      global.pulse_rate_p2 =  round((global.test_range*fps*60)/global.count_total_p2); // calculates heart rate
      switch(global.hr_set_p2) // for rolling datatable to compair heart rates
        {
         
         case 1:
             global.hr_1_p2 = global.pulse_rate_p2; // sets data point to next 
             global.game_check_p2 = 1;
             global.hr_set_p2 = 2; // set up next spot in data table 
         break;
         
         case 2:
             global.hr_2_p2 = global.pulse_rate_p2;
             global.game_check_p2 = 1;
             global.hr_set_p2 = 3;
         break;
         
         case 3:
            global.hr_3_p2 = global.pulse_rate_p2;
            global.game_check_p2 = 1;
            global.hr_set_p2 = 4;
         break;
         
         case 4:
            global.hr_4_p2 = global.pulse_rate_p2;
            global.game_check_p2 = 1;
            global.hr_set_p2 = 1;
         break;

             
         }
         
         global.count_total_p2 = 0; // reset total amount of time units
         global.count_check_p2 = 0; //resests count check to zero 
         global.pulse_check_p2 = 0;// closes  pulse_check so operation is preformed once
    }


if (global.pause_p2 == 1) // game is paused/error
{
    global.error_count_p2 = 0; //resets error latch 
  
   if (global.pulse_high_p2 = 1)
    {
        restart_count = 1;
        if (test_range_latch  = 0)
       {
            global.count_check_p2 += 1; // adds one count
            test_range_latch = 1;  // latches count 
       }
        else
            {test_range_latch = 1; }
  
    }
    else
        {test_range_latch = 0; }


    if (global.count_check_p2  == 5)// after players heart beats six times 
    { 
        global.count_check_p2 = 0; //resests count check to zero 
        global.count_total_p2 = 0;// resets total time for data sample
        
        restart_count = 0;
        global.pause_p2 = 0; // puts player back in game 
    }


}
else 
{

        // detects pulse 
    if (global.pulse_high_p2 = 1)
    {
        if (test_range_latch  = 0)
            {
                global.count_check_p2 += 1; // adds one count 
                global.error_count_p2 = 0; // reset error count 
                test_range_latch = 1;  // latches count 
            }
        else
            {test_range_latch = 1; }
    }
    else
        {test_range_latch = 0; }
}
if (start == 1)
{
    if (global.count_check_p2 == 5)
    {
        global.count_total_p2 = 0; // reset total amount of time units
         global.count_check_p2 = 0; //resests count check to zero 
         global.pulse_check_p2 = 0;// closes  pulse_check so operation is preformed once
        start = 0;
    }
    else
        {global.count_total_p2 += 1;}// add 1 time unit pulse secention
}
else
{
//check pulse count 
if (global.count_check_p2 == global.test_range)
    {
    global.pulse_check_p2 = 1; // turn players pulse check 
    }
else
    {global.count_total_p2 += 1;}// add 1 time unit pulse secention
}

// pulses check if there is no heart beat for 5 secs
if (global.error_check_p2 == global.error_count_p2) 
{

  global.pause_p2 = 1;// puts player into pause/ error mode
   
  global.count_total_p2 = 0;// resets total time for data sample
  global.count_check_p2 = 0;// resets number of beat it takes to trigger pulse check    

}
else
    {global.error_count_p2 += 1;}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (global.pause_p2 == 1)
{
if (restart_count == 0)
{
draw_text(global.X+64,global.Y-28,"PLEASE CHECK#CONNECTION");
}
else
{
draw_text(global.X+64,global.Y-24,"GAME WILL RESUME#IN " + string(-1*(global.count_check_p2 - 5)) + " PULSES");
}

}
else

{
switch(global.hr_set_p2) // hearts position set 
{
case 2:
// player x position 
hr_1_x_p2 = global.X+100;
hr_3_x_p2 = global.X+68;
hr_2_x_p2 = global.X+36;
// draw players heart rate vaules 

draw_text(hr_1_x_p2,global.Y+54,global.hr_1_p2 ); 
draw_text(hr_2_x_p2,global.Y+54,global.hr_2_p2 ); 
draw_text(hr_3_x_p2,global.Y+54,global.hr_3_p2 ); 

break;

case 3:
// player x position

hr_2_x_p2 = global.X+100;
hr_1_x_p2 = global.X+68;
hr_3_x_p2 = global.X+36;

// draw players heart rate vaules 

draw_text(hr_1_x_p2,global.Y+54,global.hr_1_p2 ); 
draw_text(hr_2_x_p2,global.Y+54,global.hr_2_p2 ); 
draw_text(hr_3_x_p2,global.Y+54,global.hr_3_p2 ); 

break;


break;
// player x position

case 1:
hr_3_x_p2 = global.X+100;
hr_2_x_p2 = global.X+68;
hr_1_x_p2 = global.X+36;
// draw players heart rate vaules 

draw_text(hr_1_x_p2,global.Y+54,global.hr_1_p2 ); 
draw_text(hr_2_x_p2,global.Y+54,global.hr_2_p2 ); 
draw_text(hr_3_x_p2,global.Y+54,global.hr_3_p2 ); 

break;

}

if (start = 1)
{draw_text(global.X+64,global.Y-24,"GAME WILL START#IN " + string(-1 * (global.count_check_p2 - 5)) + " PULSES" ); }
}

// draw_text(global.X,global.Y,global.hr_set_p1) // uncomment for debugging hr_set for player 1
draw_text(global.X+98,global.Y-52,string(global.count_check_p2)+ "/" + string(global.test_range) )
// heart rate placement 

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
